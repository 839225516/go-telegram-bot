on:
  push:
    branches:
      - main
    # Sequence of patterns matched against refs/tags
    #tags:
    #  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Latest Release

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Lint files
    runs-on: 'ubuntu-latest'
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: 设置go版本
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Lint Go Code
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin # temporary fix. See https://github.com/actions/setup-go/issues/14
          go get -u golang.org/x/lint/golint
          golint -set_exit_status ${PKG_LIST}
  test:
    needs: lint
    name: Run tests
    runs-on: 'ubuntu-latest'
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: 设置go版本
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Run Unit test
        run: go mod tidy    

      #- name: Upload Coverage report to CodeCov
      #  uses: codecov/codecov-action@v1.0.0
      #  with:
      #    token: ${{secrets.CODECOV_TOKEN}}
      #    file: ./coverage.txt      

  release:
    name: Create Release
    runs-on: 'ubuntu-latest'
    needs: test
    strategy:
      matrix:
        # List of GOOS and GOARCH pairs from `go tool dist list`
        goosarch:
          - 'aix/ppc64'
          # etc
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 设置go版本
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Get OS and arch info
        run: |
          GOOSARCH=${{matrix.goosarch}}
          GOOS=${GOOSARCH%/*}
          GOARCH=${GOOSARCH#*/}
          BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV

      - name: Validates GO releaser config
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: check

      - name: Create release on GitHub
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}          

      #- name: Build
      #  run: |
      #    go build -o "$BINARY_NAME" 

      #- name: Release Notes
      #  run:
      #    git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
      #- name: Release with Notes
      #  uses: softprops/action-gh-release@v1
      #  with:
      #    body_path: ".github/RELEASE-TEMPLATE.md"
      #    draft: true
      #    files: ${{env.BINARY_NAME}}
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}